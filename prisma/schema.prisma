generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  comment   String
  authorId  String   @map("user_id") @db.Uuid
  parent    String?  @db.Uuid
  created   DateTime @default(now()) @db.Timestamptz(6)
  updated   DateTime @default(now()) @db.Timestamptz(6)
  deleted   Boolean  @default(false)
  snippetId String   @map("snippet_id") @db.Uuid
  snippets  Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("comments")
}

model User {
  id         String    @id @db.Uuid
  name       String?   @unique
  created    DateTime? @default(now()) @db.Timestamptz(6)
  updated    DateTime? @default(now()) @db.Timestamptz(6)
  avatar     String?
  comments   Comment[]
  reports    Reports[]
  snippets   Snippet[]
  usersRoles Role?

  @@map("profiles")
}

model Snippet {
  id                          String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                       String                     @db.VarChar
  snippet                     String                     @db.VarChar
  tree                        String?
  lang                        String                     @db.VarChar
  slug                        String?                    @unique @db.VarChar
  tags                        String[]
  created                     DateTime                   @default(now()) @db.Timestamptz(6)
  updated                     DateTime                   @default(now()) @db.Timestamptz(6)
  userId                      String?                    @map("user_id") @db.Uuid
  verified                    Boolean                    @default(false)
  comments                    Comment[]
  reports                     Reports[]
  author                      User?                      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rating                      Rating?
  snippets_validation_results SnippetsValidationResults?

  @@map("snippets")
}

model Rating {
  id           String         @id(map: "snippets_ratings_pkey1") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rating       BigInt         @default(0)
  snippetId    String         @unique @map("snippet_id") @db.Uuid
  created      DateTime       @default(now()) @db.Timestamptz(6)
  updated      DateTime       @default(now()) @db.Timestamptz(6)
  snippet      Snippet        @relation(fields: [snippetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ratingRecord RatingRecord[]

  @@map("snippets_ratings")
}

model RatingRecord {
  id       String   @id(map: "snippets_ratings_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ratingId String   @map("rating_id") @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  action   String   @db.VarChar
  created  DateTime @default(now()) @db.Timestamptz(6)
  rating   Rating   @relation(fields: [ratingId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ratingId, userId], map: "unique_rating")
  @@map("snippets_ratings_records")
}

model Role {
  id       String   @id @db.Uuid
  roles    String[] @default(["user"])
  created  DateTime @default(now()) @db.Timestamptz(6)
  updated  DateTime @default(now()) @db.Timestamptz(6)
  profiles User     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("users_roles")
}

model Reports {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  snippetId String    @map("snippet_id") @db.Uuid
  fromUser  String?   @map("from_user_id") @db.Uuid
  report    String?
  created   DateTime? @default(now()) @db.Timestamptz(6)
  updated   DateTime? @default(now()) @db.Timestamptz(6)
  profiles  User?     @relation(fields: [fromUser], references: [id], onDelete: NoAction, onUpdate: NoAction)
  snippets  Snippet   @relation(fields: [snippetId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("reports")
}

model SnippetsValidationResults {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  snippetId String?  @unique @map("snippet_id") @db.Uuid
  reported  Boolean?
  reason    String?
  reviewed  Boolean  @default(false)
  checked   Boolean  @default(true)
  created   DateTime @default(now()) @db.Timestamptz(6)
  updated   DateTime @default(now()) @db.Timestamptz(6)
  snippets  Snippet? @relation(fields: [snippetId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("snippets_validation_results")
}
